-- postgreSQL

-- review Data / BDD : 
-- conserver la table wastes, mais y rajouter une colonne points (paramètre du déchet, ex: mégot = 10 pts)
-- table wastes (table de paramétrages) : supprimer colonne quantity, suppr city, et ajouter les points associés
-- création table collecte : id UUID, volunteer_id, city, date (opt: total de points si gamification)
-- création table isCollected : collect_id, waste_id, quantity -> all fk ! -> table d'action
-- Eviter de faire du N:N -> conflit interne en base de données 
    -- ex: plusieurs maisons peuvent avoir plusieurs fenêtres, donc on ne sait pas quelle fenêtre appartient à telle ou telle maison

Point SQL du Lun. 2/06
-- suppression de la colonne total_points de la table volunteers
-- suppression de la colonne donated_points de la table volunteers 
    -- ajout de cette colonne donated_points dans la table donations
    -- ajout de la colonne donation_date dans la table donations
    -> le montant du don est une propriété de la table donations

MAJ fk
-- Type de relations entre les tables
-- 1. cities <-> wastes : One-to-Many (une ville possède plusieurs déchets)
-- 2. cities <-> volunteers : One-to-Many (une ville possède plusieurs bénévoles)
-- 3. associations <-> donations : One-to-Many (une association peut recevoir plusieurs dons)
-- 4. volunteers <-> donations : One-to-Many (un bénévole peut effectuer plusieurs dons)
-- 5. volunteers <-> collectes : One-to-Many (un bénévole peut effectuer plusieurs collectes)
-- 6. collectes <-> isCollected : One-to-Many (une collecte contient plusieurs déchets collectés)
-- 7. wastes <-> isCollected : One-to-Many (un type de déchet peut être collecté dans plusieurs collectes)
-- 8. wastes <-> points : One-to-One (chaque type de déchet a un nombre de points associé)
-- 9. volunteers <-> points : One-to-One (le total de points d’un bénévole est calculé à partir des collectes)
-- 10. donations <-> points : One-to-One (un don peut générer des points pour le bénévole)




